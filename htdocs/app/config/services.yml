# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value
    phpexcel.class:  Liuggio\ExcelBundle\Factory

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    xls.phpexcel:
            class: '%phpexcel.class%'


    # redis alias it for autowiring
    Predis\Client: '@snc_redis.default'
    Predis\ClientInterface: '@Predis\Client'

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'

    # for symfony 3 the class name would likely be AppBundle\Worker\FibonacciWorker
    AppBundle\Worker\PernodWorker:
        # public: false is possible if you completely use DependencyInjection for access to the service
        public: true
        tags:
            - { name: "dtc_queue.worker" }
        calls:
            - ["setRedis", ["@snc_redis.default"]]
            - ["setRedisPrefix", ["%redis_prefix%"]]
            - ["setEntityManager", ["@doctrine.orm.entity_manager"]]
            - ["setKernel", ["@kernel"]]
            - ["setLiip", ["@liip_imagine.service.filter"]]


    # Sonata admin route services
    sonata.admin.user:
        class: AppBundle\Admin\UserAdmin
        arguments: [~, AppBundle\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User, group: '%app.website_title%' }
        public: true

    sonata.admin.userentity:
        class: AppBundle\Admin\UserEntityAdmin
        arguments: [~, AppBundle\Entity\UserEntity, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: "User Entity", group: '%app.website_title%' }
        public: true

    sonata.admin.settings:
        class: AppBundle\Admin\SettingsAdmin
        arguments: [~, AppBundle\Entity\Settings, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Settings, group: '%app.website_title%' }
        public: true

    sonata.admin.city:
        class: AppBundle\Admin\CityAdmin
        arguments: [~, AppBundle\Entity\City, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: City, group: 'Other datas' }
        public: true

    sonata.admin.brand:
        class: AppBundle\Admin\BrandAdmin
        arguments: [~, AppBundle\Entity\Brand, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Brand, group: 'Other datas' }
        public: true

    sonata.admin.entitygroup:
        class: AppBundle\Admin\EntityGroupAdmin
        arguments: [~, AppBundle\Entity\EntityGroup, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'Entity Group', group: 'Other datas' }
        public: true

    sonata.admin.entity:
        class: AppBundle\Admin\EntityAdmin
        arguments: [~, AppBundle\Entity\Entity, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Entity, group: 'Other datas' }
        public: true

    sonata.admin.businessdriver:
        class: AppBundle\Admin\BusinessDriverAdmin
        arguments: [~, AppBundle\Entity\BusinessDriver, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'Business Driver', group: 'Other datas' }
        public: true


    sonata.admin.stage:
        class: AppBundle\Admin\StageAdmin
        arguments: [~, AppBundle\Entity\Stage, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Stage, group: 'Other datas' }
        public: true

    sonata.admin.type:
        class: AppBundle\Admin\TypeAdmin
        arguments: [~, AppBundle\Entity\Type, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Type, group: 'Other datas' }
        public: true

    sonata.admin.portfolioprofile:
        class: AppBundle\Admin\PortfolioProfileAdmin
        arguments: [~, AppBundle\Entity\PortfolioProfile, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'Portfolio Profile', group: 'Other datas' }
        public: true

    sonata.admin.momentofconsumption:
        class: AppBundle\Admin\MomentOfConsumptionAdmin
        arguments: [~, AppBundle\Entity\MomentOfConsumption, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'Moment Of Convivialit√©', group: 'Other datas' }
        public: true

    sonata.admin.consumeropportunity:
        class: AppBundle\Admin\ConsumerOpportunityAdmin
        arguments: [~, AppBundle\Entity\ConsumerOpportunity, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: 'Consumer Opportunity', group: 'Other datas' }
        public: true

    sonata.admin.classification:
        class: AppBundle\Admin\ClassificationAdmin
        arguments: [~, AppBundle\Entity\Classification, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Classification, group: 'Other datas' }
        public: true

    sonata.admin.metrics:
        class: AppBundle\Admin\MetricsAdmin
        arguments: [~, AppBundle\Entity\Metrics, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Metrics, group: 'Developer' }
        public: true

    sonata.admin.activity:
        class: AppBundle\Admin\ActivityAdmin
        arguments: [~, AppBundle\Entity\Activity, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Activity, group: 'Developer' }
        public: true

    sonata.admin.notification:
        class: AppBundle\Admin\NotificationAdmin
        arguments: [~, AppBundle\Entity\Notification, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Notifications, group: 'Developer' }
        public: true

    sonata.admin.searchhistory:
            class: AppBundle\Admin\SearchHistoryAdmin
            arguments: [~, AppBundle\Entity\SearchHistory, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: 'Search History', group: 'Developer' }
            public: true

    sonata.block.service.button:
        class: AppBundle\Admin\Block\ButtonBlockService
        arguments:
            - ~
            - "@templating"
        tags:
            - { name: sonata.block }

    appbundle.admin.user_rights:
        class: AppBundle\Admin\UserRightsAdmin
        arguments: [~, ~, AppBundle:UserRightsCRUD]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User rights, group: '%app.website_title%' }

    sonata.admin.skill:
        class: AppBundle\Admin\SkillAdmin
        arguments: [~, AppBundle\Entity\Skill, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: "Skills", group: '%app.website_title%' }
        public: true

    pr.amazon_s3:
            class: Aws\S3\S3Client
            factory: [Aws\S3\S3Client, factory]
            arguments:
                -
                    credentials: { key: "%amazon.s3.key%", secret: "%amazon.s3.secret%" }
                    region: "%amazon.s3.region%"
                    version: "%amazon.s3.version%"

    pr.imagine.cache.resolver.amazon_s3:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\AwsS3Resolver
        arguments:
            - "@pr.amazon_s3"
            - "%amazon.s3.bucket%"
        tags:
            - { name: "liip_imagine.cache.resolver", resolver: "amazon_s3" }