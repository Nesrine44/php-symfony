<?php

namespace AppBundle\Repository;
use AppBundle\AppBundle;
use AppBundle\Entity\Activity;
use AppBundle\Entity\User;
use AppBundle\Entity\UserEntity;
use AppBundle\Event\SettingsEvent;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\EventDispatcher\EventDispatcher;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{


    /**
     * Get all active users.
     * 
     * @param null|\DateTime $limit_datetime
     * @return mixed
     */
    public function getAllActiveUsers($limit_datetime = null)
    {
        if(!$limit_datetime) {
            $limit_datetime = new \DateTime();
            $limit_datetime->modify('-3 Months');
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('u')
            ->from('AppBundle:User', 'u')
            ->where('u.lastLogin >= :limit_datetime');
        $qb->setParameter('limit_datetime', $limit_datetime);
        return $qb->getQuery()->getResult();
    }

    public function findNewsletterUsers()
    {
        return $this->getEntityManager()
            ->createQuery(
                "SELECT u FROM AppBundle:User u WHERE u.accept_newsletter = 1 AND u.email NOT LIKE '%corellis.eu'"
            )
            ->getResult();
    }


    /**
     * Get all for json.
     *
     * @return array
     */
    public function getAllForJson()
    {
        $all_users = $this->getEntityManager()->getRepository('AppBundle:User')->findBy(array(), array('firstname' => 'ASC'));
        $ret = array();
        foreach ($all_users as $user) {
            $ret[] = $user->toArray();
        }
        return $ret;
    }

    /**
     * Find by roles
     *
     * @param array $roles
     *
     * @return array
     */
    public function findByRoles($roles = array())
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('u')
            ->from('AppBundle:User', 'u');
        for ($i = 0; $i < count($roles); $i++) {
            $qb->orWhere('u.roles LIKE :role_' . $i);
            $qb->setParameter('role_' . $i, '%"' . $roles[$i] . '"%');
        }
        return $qb->getQuery()->getResult();
    }

    /**
     * Create pernod ricard user.
     *
     * @param $container
     * @param string $email
     * @param string $firstname
     * @param string $lastname
     * @param boolean $update
     * @return User
     */
    public function createPernodRicardUser($container, $email, $firstname, $lastname = '', $update = false)
    {
        $target_user = $this->_em->getRepository('AppBundle:User')->findOneBy(array('email' => $email));
        $prEmployeeApi = $container->get('app.pr_employee_api');
        if ($target_user) {
            if($update){
                if ($firstname && $lastname && $firstname != $target_user->getFirstname()) {
                    $target_user->setFirstname($firstname);
                }
                if ($lastname && $lastname != $target_user->getLastname()){
                    $target_user->setLastname($lastname);
                }
                $infos = $prEmployeeApi->getUserUsedInfos($target_user);
                if($infos){
                    $target_user->setCountry($infos['country']);
                    $target_user->setSituation($infos['situation']);
                    if($infos['pr_entity']){
                        $userEntity = $this->_em->getRepository('AppBundle:UserEntity')->findOneBy(array('pr_title' => $infos['pr_entity']));
                        if(!$userEntity){
                            $userEntity = new UserEntity();
                            $userEntity->setPrTitle($infos['pr_entity']);
                            $this->_em->persist($userEntity);
                            $this->_em->flush();
                            $target_user->setUserEntity($userEntity);
                        }
                    }
                }
                $this->_em->flush();
            }
        } else {
            $target_user = new User();
            $target_user->setUsername($email);
            $target_user->setEmail($email);
            $target_user->setEmailCanonical($email);
            $target_user->setEnabled(1); // enable the user or enable it later with a confirmation token in the email
            $target_user->addRole(User::ROLE_USER);
            $target_user->setIsPrEmploye(true);
            $secret_key = $container->getParameter('pr_auth')['password_key'];
            $target_user->setPlainPassword($target_user->getGeneratedLocalPassword($secret_key));
            $target_user->setFirstname($firstname);
            $target_user->setLastname($lastname);
            $this->_em->persist($target_user);
            $this->_em->flush();

            $infos = $prEmployeeApi->getUserUsedInfos($target_user);
            if($infos){
                $target_user->setCountry($infos['country']);
                $target_user->setSituation($infos['situation']);
                if($infos['pr_entity']){
                    $userEntity = $this->_em->getRepository('AppBundle:UserEntity')->findOneBy(array('pr_title' => $infos['pr_entity']));
                    if(!$userEntity){
                        $userEntity = new UserEntity();
                        $userEntity->setPrTitle($infos['pr_entity']);
                        $this->_em->persist($userEntity);
                        $this->_em->flush();
                        $target_user->setUserEntity($userEntity);
                    }
                }
                $this->_em->flush();
            }
        }

        // Event update other_data
        $pernodWorker = $container->get('AppBundle\Worker\PernodWorker');
        $dispatcher = new EventDispatcher();
        $settings_event = new SettingsEvent();
        $dispatcher->dispatch(SettingsEvent::NAME, $settings_event)->onUpdateAction($pernodWorker);
        return $target_user;
    }


    /**
     * Get connect users.
     *
     * @param User $current_user
     * @param int $offset
     * @param int $limit
     * @param array $filters
     * @return array
     */
    public function getConnectUsers($current_user, $offset = 0, $limit = 20, $filters = array())
    {
        $ret = array();
        $em = $this->getEntityManager();
        $except_ids = $this->getAllAdminIds();
        $except_ids[] = $current_user->getId();
        $query = $em->createQueryBuilder();
        $query->select('u')
            ->from('AppBundle:User', 'u')
            ->where('u.id NOT IN (:except_ids)')
            ->setParameter('except_ids', $except_ids);
        if(count($filters) > 0){
            foreach ($filters as $key => $filter){
                if($filter['type'] == 'skill'){
                    $alias = 'us_' . str_replace('-', '_', $key);
                    $query->leftJoin('u.user_skills', $alias);
                    $query->andWhere($alias . '.skill = :skill_id_' . $alias)->setParameter('skill_id_' . $alias, $filter['skill_id']);
                } else {
                    $alias = 'uir_' . str_replace('-', '_', $key);
                    $query->leftJoin('u.user_innovation_rights', $alias);
                    if (count($filter['innovations_ids']) > 0) {
                        $query->andWhere($alias . '.innovation IN (:innovations_ids_' . $alias . ')')
                            ->setParameter('innovations_ids_' . $alias, $filter['innovations_ids']);
                    }
                }
            }
        }
        $query
            ->groupBy('u.id')
            ->orderBy('u.lastLogin', 'DESC')
            ->setFirstResult($offset)
            ->setMaxResults($limit);
        $all_users = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        foreach ($all_users as $user) {
            $ret[] = $user->toArray();
        }
        return $ret;
    }

    /**
     * Check if user has views
     *
     * @param $current_user
     * @return bool
     */
    public function checkIfUserHasViews($current_user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder();
        $query->select('count(a)')
            ->from('AppBundle:activity', 'a')
            ->where('a.action_id = :action_id')
            ->andWhere("a.user = :user_id")
            ->setParameter('action_id', Activity::ACTION_PROMOTE_INNOVATION_VIEW)
            ->setParameter('user_id', $current_user->getId());
        $count = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)->getSingleScalarResult();
        return ($count > 0);
    }


    /**
     * Get connect count.
     *
     * @param $current_user
     * @param array $filters
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getConnectCount($current_user, $filters = array())
    {
        $except_ids = $this->getAllAdminIds();
        $except_ids[] = $current_user->getId();
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder();
        $query->select('count(u)')
            ->from('AppBundle:User', 'u')
            ->where('u.id NOT IN (:except_ids)')
            ->groupBy('u.id')
            ->setParameter('except_ids', $except_ids);
        if(count($filters) > 0){
            foreach ($filters as $key => $filter){
                if($filter['type'] == 'skill'){
                    $alias = 'us_' . str_replace('-', '_', $key);
                    $query->leftJoin('u.user_skills', $alias);
                    $query->andWhere($alias . '.skill = :skill_id_' . $alias)->setParameter('skill_id_' . $alias, $filter['skill_id']);
                } else {
                    $alias = 'uir_' . str_replace('-', '_', $key);
                    $query->leftJoin('u.user_innovation_rights', $alias);
                    if (count($filter['innovations_ids']) > 0) {
                        $query->andWhere($alias . '.innovation IN (:innovations_ids_' . $alias . ')')
                            ->setParameter('innovations_ids_' . $alias, $filter['innovations_ids']);
                    }
                }
            }
        }
        $count = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)->getResult();
        return count($count);
    }

    /**
     * Get user feedback count.
     *
     * @param User $user
     * @return mixed
     */
    public function getUserFeedBackCount($user)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT count(f.id) FROM feedback f LEFT JOIN feedback_invitation fi ON f.invitation_id = fi.id WHERE fi.user_id = ?";
        $stmt = $conn->prepare($sql);
        $stmt->bindValue(1, $user->getId());
        $stmt->execute();
        return $stmt->fetchAll(\PDO::FETCH_COLUMN)[0];
    }


    /**
     * Get all admin ids
     *
     * @return array
     */
    public function getAllAdminIds()
    {
        $users = $this->findByRoles([User::ROLE_SUPER_ADMIN]);
        $all_ids = array();
        foreach ($users as $user) {
            $all_ids[] = $user->getId();
        }
        return $all_ids;
    }

    /**
     * Get all makers ids
     *
     * @return mixed
     */
    public function getAllMakersIds()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder->select('DISTINCT(c.id)')
            ->from('AppBundle:Innovation', 'i')
            ->leftJoin('i.contact', 'c')
            ->where('i.is_active = :is_active')
            ->setParameter('is_active', true)
            ->groupBy('i.contact');
        $all_ids = array();
        foreach ($query->getQuery()->getArrayResult() as $item) {
            $all_ids[] = intval($item[1]);
        }
        return $all_ids;
    }

    /**
     * Get all makers
     *
     * @return mixed
     */
    public function getAllMakers()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder->select('u')
            ->from('AppBundle:User', 'u')
            ->where('u.id IN (:user_ids)')
            ->setParameter('user_ids', $this->getAllMakersIds());
        return $query->getQuery()->getResult();
    }



    /**
     * search user for user
     * @param string $search
     * @param int $offset
     * @param int $limit
     * @param array $innovations_ids
     * @return array
     */
    public function search($search = '', $offset = 0, $limit = 20, $innovations_ids = array())
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $exploder = explode(" ", $search);
        $query =  $queryBuilder
            ->select(['u'])
            ->from('AppBundle:User', 'u');
        $query->addSelect("(CASE WHEN (u.firstname like :search_first OR u.lastname like :search_first) THEN 2 WHEN (u.firstname like :global_search OR u.lastname like :global_search) THEN 1 ELSE 0 END) AS HIDDEN ORD ");
        $query->setParameter('search_first', $exploder[0] . '%')
            ->setParameter('global_search', '%' . $exploder[0] . '%');
        if(count($innovations_ids) > 0){
            foreach ($exploder as $key => $searchWord){
                $query->leftJoin('u.user_innovation_rights', 'uir_'.$key);
                $query->andWhere('(u.firstname LIKE :search_word_'.$key.' OR u.lastname LIKE :search_word_'.$key.') OR uir_'.$key.'.innovation IN (:innovations_ids_'.$key.')')
                    ->setParameter('search_word_'.$key, $innovations_ids)
                    ->setParameter('innovations_ids_'.$key, $innovations_ids);
            }

        } else {
            foreach ($exploder as $key => $searchWord){
                $query->andWhere('u.firstname LIKE :search_word_'.$key.' OR u.lastname LIKE :search_word_'.$key)
                    ->setParameter('search_word_'.$key, '%' . $searchWord . '%');
            }
        }
        $query
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->groupBy('u.id')
            ->addOrderBy('ORD', 'DESC')
            ->addOrderBy('u.firstname', 'ASC');
        $users = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();

        $ret = array();
        foreach ($users as $user){
            $ret[] = $user->toArray();
        }
        return $ret;
    }

    /**
     * search user for user
     * @param string $search
     * @param array $innovations_ids
     * @return array
     */
    public function searchIds($search = '', $innovations_ids = array())
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query =  $queryBuilder
            ->select(['u.id'])
            ->from('AppBundle:User', 'u');
        if(count($innovations_ids) > 0){
            $query->leftJoin('u.user_innovation_rights', 'uir');
            $query->andWhere('(u.firstname LIKE :search_word OR u.lastname LIKE :search_word) OR uir.innovation IN (:innovations_ids)');
            $query->setParameter('innovations_ids', $innovations_ids);
        } else {
            $query->andWhere('u.firstname LIKE :search_word OR u.lastname LIKE :search_word');
        }
        $query
            ->setParameter('search_word', '%' . $search . '%')
            ->groupBy('u.id');
        $users = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        
        $ret = array();
        foreach ($users as $user){
            $ret[] = $user['id'];
        }
        return $ret;
    }

    /**
     * search user for user
     * @param string $search
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function searchConnect($search = '', $offset = 0, $limit = 20)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query =  $queryBuilder
            ->select(['u'])
            ->from('AppBundle:User', 'u');
        $query->addSelect("(CASE WHEN u.firstname like :search_first THEN 2 WHEN u.firstname like :global_search THEN 1 ELSE 0 END) AS HIDDEN ORD ");
        $query->andWhere('u.firstname LIKE :search_word OR u.lastname LIKE :search_word')
            ->setParameter('search_first', $search . '%')
            ->setParameter('global_search', '%' . $search . '%')
            ->setParameter('search_word', '%' . $search . '%')
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('ORD', 'DESC');
        $users = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();

        $ret = array();
        foreach ($users as $user){
            $ret[] = $user->toSelect2Array();
        }
        return $ret;
    }
}

