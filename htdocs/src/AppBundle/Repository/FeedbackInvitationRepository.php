<?php

namespace AppBundle\Repository;
use AppBundle\Entity\FeedbackInvitation;

/**
 * FeedbackInvitationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeedbackInvitationRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Retourne la liste des demande de feedbacks par inno
     *
     * @param $inno_id
     * @param int $offset
     * @param int $limit
     * @return array|\object[]
     */
    public function getFeedbackersForInnovation($inno_id, $offset = 0, $limit = 6) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT MAX(fi.id) FROM feedback_invitation fi WHERE fi.innovation_id = :innovation_id GROUP BY fi.user_id';
        $stmt = $conn->prepare($sql);
        $stmt->bindValue(':innovation_id', $inno_id);
        $stmt->execute();
        $feedback_invitation_ids = array_values($stmt->fetchAll(\PDO::FETCH_COLUMN));
        return $qb->select([
            'fi'
            ])
            ->from('AppBundle:FeedbackInvitation', 'fi')
            ->leftJoin('fi.innovation', 'innovation')
            ->where('innovation.id = :inno_id')
            ->andWhere('fi.id IN (:invitation_ids)')
            ->orderBy('fi.status', 'ASC')
            ->groupBy('fi.user')
            ->setParameter('inno_id', $inno_id)
            ->setParameter('invitation_ids', $feedback_invitation_ids)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();

    }

    /**
     * Retourne le nombre total des demande de feedbacks par inno
     *
     * @param $inno_id int|string id de l'innovation
     * @return int
     */
    public function getCountFeedbackersForInnovation($inno_id) {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT MAX(fi.id) FROM feedback_invitation fi WHERE fi.innovation_id = :innovation_id GROUP BY fi.user_id';
        $stmt = $conn->prepare($sql);
        $stmt->bindValue(':innovation_id', $inno_id);
        $stmt->execute();
        return count($stmt->fetchAll(\PDO::FETCH_COLUMN));
    }

    /**
     * Remove access for user and innovation.
     *
     * @param $user
     * @param $innovation
     * @return bool
     */
    public function removeAccessForUserAndInnovation($user, $innovation) {
        $em = $this->getEntityManager();
        $feedbackInvitations = $em->getRepository('AppBundle:FeedbackInvitation')->findBy([
            'user' => $user,
            'innovation' => $innovation
        ]);
        if($feedbackInvitations){
            foreach ($feedbackInvitations as $feedbackInvitation){
                $feedbackInvitation->setStatus(FeedbackInvitation::STATUS_REMOVED);
            }
            $em->flush();
            return true;
        }
        return false;
    }

}
