<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Activity;
use AppBundle\Entity\Classification;
use AppBundle\Entity\Innovation;
use AppBundle\Entity\Settings;
use AppBundle\Entity\Stage;
use AppBundle\Entity\Tag;
use AppBundle\Entity\User;
use Doctrine\DBAL\Connection;

/**
 * InnovationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InnovationRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Get All innovations query.
     *
     * @return static
     */
    public function getAllInnovationsQuery()
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        return $queryBuilder
            ->select([
                'i',
                'financial_datas',
                'performance_reviews',
                'brand',
                'stage',
                'old_stage',
                'type',
                'classification',
                'business_driver',
                'consumer_opportunity',
                'beautyshot_picture',
                'packshot_picture',
                'financial_graph_picture',
                'pot_picture_1',
                'pot_picture_2',
                'additional_pictures',
                'entity',
                'portfolio_profile',
                'moment_of_consumption'
            ])
            ->from('AppBundle:Innovation', 'i')
            ->leftJoin('i.financial_datas', 'financial_datas')
            ->leftJoin('i.performance_reviews', 'performance_reviews')
            ->leftJoin('i.brand', 'brand')
            ->leftJoin('i.stage', 'stage')
            ->leftJoin('i.old_stage', 'old_stage')
            ->leftJoin('i.type', 'type')
            ->leftJoin('i.classification', 'classification')
            ->leftJoin('i.business_driver', 'business_driver')
            ->leftJoin('i.consumer_opportunity', 'consumer_opportunity')
            ->leftJoin('i.beautyshot_picture', 'beautyshot_picture')
            ->leftJoin('i.packshot_picture', 'packshot_picture')
            ->leftJoin('i.financial_graph_picture', 'financial_graph_picture')
            ->leftJoin('i.pot_picture_1', 'pot_picture_1')
            ->leftJoin('i.pot_picture_2', 'pot_picture_2')
            ->leftJoin('i.additional_pictures', 'additional_pictures')
            ->leftJoin('i.entity', 'entity')
            ->leftJoin('i.portfolio_profile', 'portfolio_profile')
            ->leftJoin('i.moment_of_consumption', 'moment_of_consumption');
    }

    /**
     * Get all active innovations.
     *
     * @param array $ids
     * @return array
     */
    public function getAllActiveInnovations($ids = array())
    {
        $query = $this->getAllInnovationsQuery();
        $query->where('i.is_active = :is_active')
            ->setParameter('is_active', true);
        if (count($ids) > 0) {
            $query->andWhere('i.id IN (:ids)')
                ->setParameter('ids', $ids);
        }
        return $query->getQuery()->getResult();
    }

    /**
     * Find active innovation.
     * @param int $id
     * @return null|Innovation
     */
    public function findActiveInnovation($id)
    {
        return $this->findOneBy([
            'id' => $id,
            'is_active' => true
        ]);
    }

    /**
     * Get all explore innovations.
     *
     * @return array
     */
    public function getAllExploreInnovations()
    {
        $query = $this->getAllInnovationsQuery();
        $query->where('i.is_active = :is_active')
            ->setParameter('is_active', true);
        $query->andWhere('i.stage IN (:stages)')
            ->setParameter('stages', Stage::getExploreStages());
        $query->andWhere('i.is_frozen = :is_frozen')
            ->setParameter('is_frozen', false);
        $query->andWhere('i.classification = :classification')
            ->setParameter('classification', Classification::CLASSIFICATION_ID_PRODUCT);
        return $query->getQuery()->getResult();
    }


    /**
     * Get all promote emails innovations.
     *
     * @return array
     */
    public function getAllPromoteEmailsInnovations()
    {
        $em = $this->getEntityManager();
        $query = $em->createQueryBuilder();
        $query->select('i')
            ->from('AppBundle:Innovation', 'i')
            ->leftJoin('i.activities', 'a')
            ->where('a.action_id = :action_id')
            ->andWhere("(:time - UNIX_TIMESTAMP(a.created_at)) <= :timestamp_week")
            ->setParameter('time', time())
            ->setParameter('action_id', Activity::ACTION_PROMOTE_INNOVATION_VIEW)
            ->setParameter('timestamp_week', 604800); // 1 week in seconds
        return $query->getQuery()->getResult();
    }

    /**
     * Get all innovations for excel export.
     *
     * @param Settings $settings
     * @param array $ids
     * @return array
     */
    public function getAllInnovationsForExcelExport(Settings $settings = null, $ids = array())
    {
        $result = $this->getAllActiveInnovations($ids);
        $all_innovations = array();
        if (!$settings) {
            $settings = $this->getEntityManager()->getRepository('AppBundle:Settings')->getCurrentSettings();
        }
        foreach ($result as $item) {
            $all_innovations[] = $item->toExcelArray($settings);
        }
        return $all_innovations;
    }

    /**
     * Get all innovations for global data.
     *
     * @param Settings $settings
     * @param $liip
     * @return array
     */
    public function getAllInnovationsForGlobalData(Settings $settings = null, $liip = null)
    {
        $result = $this->getAllActiveInnovations();
        $all_innovations = array();
        if (!$settings) {
            $settings = $this->getEntityManager()->getRepository('AppBundle:Settings')->getCurrentSettings();
        }
        foreach ($result as $item) {
            $all_innovations[] = $item->toArray($settings, $liip);
        }
        return $all_innovations;
    }


    /**
     * Get infos for consolidation.
     *
     * @param Settings|null $settings
     * @param null $all_innovations
     * @param null|object $liip
     * @return array
     */
    public function getInfosForConsolidation(Settings $settings = null, $all_innovations = null, $liip = null)
    {
        if (!$settings) {
            $settings = $this->getEntityManager()->getRepository('AppBundle:Settings')->getCurrentSettings();
        }
        $the_date = $settings->getCurrentFinancialDate();
        $ret = array(
            'other_data' => array(
                'date_libelle' => str_replace('final', '', str_replace('_', ' ', $settings->getLibelleBudgetNextYear($the_date))),
                'old_date_libelle' => str_replace('final', '', str_replace('_', ' ', $settings->getLibelleBudgetCurrentYear($the_date))),
            ),
        );
        return $ret;
    }

    /**
     * Get all innovations for user.
     *
     * @param User $user
     * @param array $ids
     * @return mixed
     */
    public function getAllInnovationsForUser(User $user, $ids = array())
    {
        $innovations_ids = $this->getAllInnovationsIdsForUser($user, $ids);
        return $this->getAllActiveInnovations($innovations_ids);
    }


    /**
     * Get all explore innovation_ids
     *
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getAllExploreInnovationsIds()
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT id FROM innovation where is_active = '1' AND stage_id IN (4, 5) AND is_frozen = '0' AND classification_id = 2";
        //$sql = 'SELECT id FROM innovation WHERE is_active = :is_active AND stage_id IN (:stage_ids) AND is_frozen = :is_frozen AND classification_id = :classification_id';
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        return $stmt->fetchAll(\PDO::FETCH_COLUMN);
    }


    /**
     * Get all innovation_ids for user.
     *
     * @param User $user
     * @param array $ids
     * @param bool $with_explore
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getAllInnovationsIdsForUser(User $user, $ids = array(), $with_explore = false)
    {
        $conn = $this->getEntityManager()->getConnection();
        if (!$user->hasAdminRights() && !$user->hasManagementRights()) {
            $sql = 'SELECT innovation_id FROM user_innovation_right where user_id = ?';
            $stmt = $conn->prepare($sql);
            $stmt->bindValue(1, $user->getId());
            $stmt->execute();
            $user_innovations_ids = $stmt->fetchAll(\PDO::FETCH_COLUMN);
            if ($with_explore) {
                $explore_ids = $this->getAllExploreInnovationsIds();
                $user_innovations_ids = array_unique(array_merge($user_innovations_ids, $explore_ids));
            }
            $innovations_ids = (count($ids) > 0) ? array_intersect($user_innovations_ids, $ids) : $user_innovations_ids;
        } else {
            $sql = 'SELECT id FROM innovation where is_active = ? ORDER BY title ASC';
            $stmt = $conn->prepare($sql);
            $stmt->bindValue(1, true);
            $stmt->execute();
            $user_innovations_ids = $stmt->fetchAll(\PDO::FETCH_COLUMN);
            $innovations_ids = (count($ids) > 0) ? array_intersect($user_innovations_ids, $ids) : $user_innovations_ids;
        }
        return $innovations_ids;
    }

    /**
     * Get all innovation titles for user manage filters.
     * Note: We only need id and titles, so it's better to not use getAllInnovationsIdsForUser()
     *
     * @param User $user
     * @return array
     */
    public function getAllInnovationTitlesForUserManageFilters(User $user)
    {
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder->select([
            'i.id',
            'i.title'
        ])
            ->from('AppBundle:Innovation', 'i')
            ->where('i.is_active = :is_active');
        if (!$user->hasAdminRights() && !$user->hasManagementRights()) {
            $innovations_ids = $this->getAllInnovationsIdsForUser($user);
            $query->andWhere('i.id in (:innovation_ids)');
            $query->setParameters(array(
                'is_active' => true,
                'innovation_ids' => $innovations_ids
            ));
        } else {
            $query->setParameter('is_active', true);
        }
        return $query->getQuery()->getArrayResult();
    }

    /**
     * search active innovations for admin.
     *
     * @param int|string|null $entity_id
     * @param array $except_ids
     * @parem string $search_word
     * @return array
     */
    public function searchActiveInnovationsForAdmin($entity_id = null, $except_ids = array(), $search_word = "")
    {
        $query = $this->getAllInnovationsQuery();
        $query->where('i.is_active = :is_active')
            ->setParameter('is_active', true);
        if (count($except_ids) > 0) {
            $query->andWhere('i.id NOT IN (:ids)')
                ->setParameter('ids', $except_ids);
        }
        if ($entity_id && $entity_id != 'all') {
            $query->andWhere('i.entity = :entity_id')
                ->setParameter('entity_id', $entity_id);
        }
        if ($search_word && $search_word != '') {
            $query->andWhere('i.title LIKE :search_word')
                ->setParameter('search_word', '%' . $search_word . '%');
        }
        return $query->getQuery()->getResult();
    }


    /**
     * search innovations for user
     * @param User $user
     * @param string $search
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function searchForUser($user, $search = '', $offset = 0, $limit = 20)
    {
        $innovation_ids = $this->getAllInnovationsIdsForUser($user, array(), true);
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $exploder = explode(" ", $search);
        $query = $queryBuilder
            ->select(['i'])
            ->from('AppBundle:Innovation', 'i');
        $query->addSelect("(CASE WHEN i.title like :search_first THEN 2 WHEN i.title like :global_search THEN 1 ELSE 0 END) AS HIDDEN ORD ");
        $query->andWhere('i.id IN (:ids)');
        $query->setParameter('search_first', $exploder[0] . '%')
            ->setParameter('global_search', '%' . $exploder[0] . '%')
            ->setParameter('ids', $innovation_ids);
        foreach ($exploder as $key => $searchWord){
            $query->andWhere('i.title LIKE :search_word_'.$key)
                ->setParameter('search_word_'.$key, '%' . $searchWord . '%');
        }
        $query
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->addOrderBy('ORD', 'DESC')
            ->addOrderBy('i.sort_score', 'DESC')
            ->addOrderBy('i.title', 'ASC');
        $innovations = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        $ret = array();
        foreach ($innovations as $innovation) {
            $ret[] = $innovation->toSearchArray();
        }
        return $ret;
    }

    /**
     * search innovations for user
     * @param User $user
     * @param string $search
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function searchIdsForUser($user, $search = '')
    {
        $innovation_ids = $this->getAllInnovationsIdsForUser($user, array(), true);
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $exploder = explode(" ", $search);
        $query = $queryBuilder
            ->select(['i.id'])
            ->from('AppBundle:Innovation', 'i');
        $query
            ->andWhere('i.id IN (:ids)')
            ->setParameter('ids', $innovation_ids);
        foreach ($exploder as $key => $searchWord){
            $query->andWhere('i.title LIKE :search_word_'.$key)
                ->setParameter('search_word_'.$key, '%' . $searchWord . '%');
        }
        $innovations = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        $ret = array();
        foreach ($innovations as $innovation) {
            $ret[] = $innovation['id'];
        }
        return $ret;
    }

    /**
     * search pictures for user
     * @param User $user
     * @param string $search
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function searchPicturesForUser($user, $search = '', $offset = 0, $limit = 20)
    {
        $innovation_ids = $this->getAllInnovationsIdsForUser($user, array(), true);
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $exploder = explode(" ", $search);
        $query = $queryBuilder
            ->select(['i'])
            ->from('AppBundle:Innovation', 'i');
        $query->addSelect("(CASE WHEN i.title like :search_first THEN 2 WHEN i.title like :global_search THEN 1 ELSE 0 END) AS HIDDEN ORD ");
        $query->andWhere('i.id IN (:ids)');
        $query->setParameter('search_first', $exploder[0] . '%')
            ->setParameter('global_search', '%' . $exploder[0] . '%')
            ->setParameter('ids', $innovation_ids);
        foreach ($exploder as $key => $searchWord){
            $query->andWhere('i.title LIKE :search_word_'.$key)
                ->setParameter('search_word_'.$key, '%' . $searchWord . '%');
        }
        $query
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->addOrderBy('ORD', 'DESC')
            ->addOrderBy('i.sort_score', 'DESC')
            ->addOrderBy('i.title', 'ASC');
        $innovations = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        $ret = array();
        foreach ($innovations as $innovation) {
            $pictures = $innovation->getExplorePictures(null, true, true);
            foreach ($pictures as $picture) {
                $ret[] = array(
                    'picture' => $picture,
                    'innovation_title' => $innovation->getTitle(),
                    'innovation_id' => $innovation->getId()
                );
            }
        }
        return $ret;
    }

    /**
     * Search all pictures by innovation ids.
     *
     * @param $websiteGlobalDataService
     * @param $innovation_ids
     * @return array
     */
    public function searchAllPicturesByInnovationIds($websiteGlobalDataService, $innovation_ids)
    {
        $innovations_array = $websiteGlobalDataService->getInnovationsArrayByArrayIds($innovation_ids);
        $ret = array();
        foreach ($innovations_array as $innovation_array){
            $pictures = $innovation_array['explore']['images_detail'];
            foreach ($pictures as $picture){
                $ret[] = $picture;
            }
        }
        return $ret;
    }


    /**
     * search innovations for user
     * @param User $user
     * @param Tag $tag
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function searchForUserByTag($user, $tag, $offset = 0, $limit = 20)
    {
        $innovation_ids = $this->getAllInnovationsIdsForUser($user, array(), true);
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select(['i'])
            ->from('AppBundle:Innovation', 'i');
        $query->andWhere('i.id IN (:ids)')
            ->andWhere(':tag MEMBER OF i.tags')
            ->setParameter('tag', $tag)
            ->setParameter('ids', $innovation_ids)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('i.title', 'ASC');
        $innovations = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        $ret = array();
        foreach ($innovations as $innovation) {
            $ret[] = $innovation->toSearchArray();
        }
        return $ret;
    }

    /**
     * search pictures for user
     * @param User $user
     * @param Tag $tag
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function searchPicturesForUserByTag($user, $tag, $offset = 0, $limit = 20)
    {
        $innovation_ids = $this->getAllInnovationsIdsForUser($user, array(), true);
        $queryBuilder = $this->getEntityManager()->createQueryBuilder();
        $query = $queryBuilder
            ->select(['i'])
            ->from('AppBundle:Innovation', 'i');
        $query->andWhere('i.id IN (:ids)')
            ->andWhere(':tag MEMBER OF i.tags')
            ->setParameter('tag', $tag)
            ->setParameter('ids', $innovation_ids)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->orderBy('i.title', 'ASC');
        $innovations = $query->getQuery()
            ->useQueryCache(true)
            ->useResultCache(true, 3600)
            ->getResult();
        $ret = array();
        foreach ($innovations as $innovation) {
            $pictures = $innovation->getExplorePictures(null, true, true);
            foreach ($pictures as $picture) {
                $ret[] = array(
                    'picture' => $picture,
                    'innovation_title' => $innovation->getTitle(),
                    'innovation_id' => $innovation->getId()
                );
            }
        }
        return $ret;
    }
}


