<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Activity;
use AppBundle\Entity\Canvas;
use AppBundle\Entity\FinancialData;
use AppBundle\Entity\Innovation;
use AppBundle\Entity\User;
use AppBundle\Event\NotificationEvent;
use Symfony\Component\EventDispatcher\EventDispatcher;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Create activity.
     *
     * @param User $user
     * @param Innovation|null $innovation
     * @param int $action_id action_id via constant
     * @param string $key key
     * @param null|array $data
     * @param null|string $old_value old_value
     * @param null|string $new_value new_value
     * @param FinancialData $financial_data financial_data
     * @param bool $is_child is_child
     * @param int $source_id source_id via constant
     * @return Activity
     */
    public function createActivity($user, $innovation = null, $action_id, $key = null, $data = null, $old_value = null, $new_value = null, $financial_data = null, $is_child = false, $source_id = Activity::SOURCE_WEB)
    {
        $em = $this->getEntityManager();
        if (!$data) {
            $data = array(
                'key' => $key,
                'old_value' => $old_value,
                'new_value' => $new_value
            );
        }
        $activity = new Activity();

        $activity->setUser($user);
        $activity->setActionId($action_id);
        $activity->setSourceId($source_id);
        $activity->setIsChild($is_child);
        if ($innovation) {
            $activity->setInnovation($innovation);
        }
        $activity->setDataArray($data);
        if ($financial_data) {
            $activity->setFinancialData($financial_data);
        }
        $activity->generateTitle($key);
        $em->persist($activity);
        $em->flush();
        return $activity;
    }

    /**
     * Create export activity.
     *
     * @param User $user
     * @param null|Innovation $innovation
     * @param int $action_id
     * @param null|string $type
     * @param null|string  $url
     * @param int $source_id
     * @return Activity
     */
    public function createExportActivity($user, $innovation = null, $action_id, $type = null, $url = null, $source_id = Activity::SOURCE_WEB)
    {
        $data = array(
            'url' => $url,
            'type' => $type,
            'status' => 'launched'
        );
        return $this->createActivity($user, $innovation, $action_id, $type, $data, null, null, null, false, $source_id);
    }


    /**
     * Create promote activity.
     *
     * @param User $user
     * @param null|Innovation $innovation
     * @param int $action_id
     * @param null|string $type
     * @param null|string  $url
     * @param int $source_id
     * @return Activity
     */
    public function createPromoteActivity($user, $innovation = null, $action_id, $type = null, $url = null, $source_id = Activity::SOURCE_WEB)
    {
        $data = array(
            'url' => $url,
            'type' => $type,
            'sended' => false,
            'status' => 'launched'
        );
        $dispatcher = new EventDispatcher();
        $notification_event = new NotificationEvent($this->getEntityManager());
        if($action_id == Activity::ACTION_PROMOTE_INNOVATION_VIEW) {
            $dispatcher->dispatch(NotificationEvent::NAME, $notification_event)->onViewInnovation($innovation);
        }
        if($action_id == Activity::ACTION_PROMOTE_INNOVATION_EXPORT) {
            $dispatcher->dispatch(NotificationEvent::NAME, $notification_event)->onExportInnovation($innovation);
        }
        return $this->createActivity($user, $innovation, $action_id, $type, $data, null, null, null, false, $source_id);
    }

    /**
     * Create share activity.
     *
     * @param User $user
     * @param Innovation $innovation
     * @param User $target_user
     * @param string $message
     * @return Activity
     */
    public function createShareActivity($user, $innovation, $target_user, $message = '')
    {
        $data = array(
            'target_user' => array(
                'username' => $target_user->getProperUsername(),
                'situation_and_entity' => $target_user->getSituationAndEntity(),
                'id' => $target_user->getId(),
                'picture' => $target_user->getPictureUrl()
            ),
            'message' => $message,
            'clicked' => false
        );
        $dispatcher = new EventDispatcher();
        $notification_event = new NotificationEvent($this->getEntityManager());
        $dispatcher->dispatch(NotificationEvent::NAME, $notification_event)->onShareInnovation($innovation);
        return $this->createActivity($user, $innovation, Activity::ACTION_INNOVATION_SHARE, null, $data);
    }


    /**
     * Create feedback activity.
     *
     * @param User $user
     * @param Innovation $innovation
     * @param string $activity_key
     * @param null|User $target_user
     * @return Activity
     */
    public function createFeedbackActivity($user, $innovation, $activity_key, $target_user = null )
    {
        $data = array();
        if($target_user) {
            $data = array(
                'target_user' => array(
                    'username' => $target_user->getProperUsername(),
                    'situation_and_entity' => $target_user->getSituationAndEntity(),
                    'id' => $target_user->getId(),
                    'picture' => $target_user->getPictureUrl()
                )
            );
        }
        return $this->createActivity($user, $innovation, $activity_key, null, $data);
    }

    /**
     * Terminate export activity.
     *
     * @param int $activity_id
     * @return bool
     */
    public function terminateExportActivity($activity_id)
    {
        if(!$activity_id){
            return false;
        }
        $em = $this->getEntityManager();
        $activity = $em->getRepository('AppBundle:Activity')->find($activity_id);
        if($activity){
            $activity->setTitle("[SUCCEED] " . $activity->getTitle());
            $the_data = $activity->getDataArray();
            $the_data['status'] = 'succeed';
            $activity->setDataArray($the_data);
            $em->flush();
            if($the_data['type'] == 'quali' && !$activity->getUser()->hasAdminRights() && !$activity->getUser()->getUserInnovationRightForAnInnovation($activity->getInnovation())) {
                $this->createPromoteActivity($activity->getUser(), $activity->getInnovation(), Activity::ACTION_PROMOTE_INNOVATION_EXPORT);
            }
            return true;
        }
        return false;
    }


    /**
     * Get all activities for innovation.
     *
     * @param int|null $innovation_id
     * @param int $offset
     * @param int $limit
     * @param array $except_actions
     * @param bool $except_hq
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    function getAllActivitiesForInnovation($innovation_id = null, $offset = 0, $limit = 20, $except_actions = array(), $except_hq = false)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('a')
            ->from('AppBundle:Activity', 'a');

        if ($innovation_id) {
            $qb->where('a.innovation = :innovation');
            $qb->setParameter('innovation', $innovation_id);
        }
        if (count($except_actions) > 0) {
            $qb->andWhere('a.action_id NOT in (:roles)');
            $qb->setParameter('roles', $except_actions);
        }

        $export_actions = array(
            Activity::ACTION_EXPORT_EXCEL,
            Activity::ACTION_EXPORT_PPT,
        );
        $promote_actions = array(
            Activity::ACTION_PROMOTE_INNOVATION_EXPORT,
            Activity::ACTION_PROMOTE_INNOVATION_VIEW,
            Activity::ACTION_INNOVATION_SHARE,
        );
        $qb->andWhere('a.action_id NOT IN (:export_actions) OR (a.action_id IN (:export_actions) AND a.title LIKE :succeed_title)');
        $qb->andWhere('a.action_id NOT IN (:promote_actions)');
        $qb->setParameter('export_actions', $export_actions);
        $qb->setParameter('promote_actions', $promote_actions);
        $qb->setParameter('succeed_title', '[SUCCEED]%');


        if ($except_hq) {
            $hq_user = $em->getRepository('AppBundle:User')->findByRoles(
                array(
                    User::ROLE_SUPER_ADMIN,
                    User::ROLE_HQ,
                )
            );
            $qb->andWhere('a.user NOT IN (:hq_user)');
            $qb->setParameter('hq_user', $hq_user);
        }
        $deprecated_keys = array('square', 'caroussel');
        for ($i = 1; $i <= 5; $i++) {
            $deprecated_keys[] = 'volume_' . $i;
            $deprecated_keys[] = 'net_sales_' . $i;
            $deprecated_keys[] = 'contributing_margin_' . $i;
            $deprecated_keys[] = 'central_investment_' . $i;
            $deprecated_keys[] = 'advertising_promotion_' . $i;
            $deprecated_keys[] = 'caap_' . $i;
        }
        for ($i = 0; $i < count($deprecated_keys); $i++) {
            $qb->andWhere('a.data NOT LIKE :key_' . $i);
            $qb->setParameter('key_' . $i, '%"' . $deprecated_keys[$i] . '"%');
        }
        $qb->orderBy('a.created_at', 'DESC');
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Get all activities for global.
     *
     * @param int $offset
     * @param int $limit
     * @param array $except_actions
     * @param bool $except_hq
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getAllActivitiesForGlobal($offset = 0, $limit = 20, $except_actions = array(), $except_hq = false)
    {
        return $this->getAllActivitiesForInnovation(null, $offset, $limit, $except_actions, $except_hq);
    }

    /**
     * Get all activities for user.
     *
     * @param int|null $user_id
     * @param int $offset
     * @param int $limit
     * @param array $except_actions
     * @param bool $except_hq
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    function getAllActivitiesForUser($user_id = null, $offset = 0, $limit = 20, $except_actions = array(), $except_hq = false)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('a')
            ->from('AppBundle:Activity', 'a');

        if ($user_id) {
            $qb->where('a.user = :user');
            $qb->setParameter('user', $user_id);
        }
        if (count($except_actions) > 0) {
            $qb->andWhere('a.action_id NOT in (:roles)');
            $qb->setParameter('roles', $except_actions);
        }

        $export_actions = array(
            Activity::ACTION_EXPORT_EXCEL,
            Activity::ACTION_EXPORT_PPT,
        );
        $promote_actions = array(
            Activity::ACTION_PROMOTE_INNOVATION_EXPORT,
            Activity::ACTION_PROMOTE_INNOVATION_VIEW,
        );
        $qb->andWhere('a.action_id NOT IN (:export_actions) OR (a.action_id IN (:export_actions) AND a.title LIKE :succeed_title)');
        $qb->andWhere('a.action_id NOT IN (:promote_actions)');
        $qb->setParameter('export_actions', $export_actions);
        $qb->setParameter('promote_actions', $promote_actions);
        $qb->setParameter('succeed_title', '[SUCCEED]%');


        if ($except_hq) {
            $hq_user = $em->getRepository('AppBundle:User')->findByRoles(
                array(
                    User::ROLE_SUPER_ADMIN,
                    User::ROLE_HQ,
                )
            );
            $qb->andWhere('a.user NOT IN (:hq_user)');
            $qb->setParameter('hq_user', $hq_user);
        }
        $deprecated_keys = array('square', 'caroussel');
        for ($i = 1; $i <= 5; $i++) {
            $deprecated_keys[] = 'volume_' . $i;
            $deprecated_keys[] = 'net_sales_' . $i;
            $deprecated_keys[] = 'contributing_margin_' . $i;
            $deprecated_keys[] = 'central_investment_' . $i;
            $deprecated_keys[] = 'advertising_promotion_' . $i;
            $deprecated_keys[] = 'caap_' . $i;
        }
        for ($i = 0; $i < count($deprecated_keys); $i++) {
            $qb->andWhere('a.data NOT LIKE :key_' . $i);
            $qb->setParameter('key_' . $i, '%"' . $deprecated_keys[$i] . '"%');
        }
        $qb->orderBy('a.created_at', 'DESC');
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }


    /**
     * Dashboard : get innovations new/back in pipeline.
     *
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function dashboardGetInnovationsNewBackInPipeline($offset = 0, $limit = 6)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select(['a', 'i'])
            ->from('AppBundle:Activity', 'a')
            ->innerJoin('a.innovation', 'i');

        $out_stages = $em->getRepository('AppBundle:Stage')->getOutStages();
        $qb->andWhere('i.stage NOT IN (:out_stages)');
        $qb->setParameter('out_stages', $out_stages);

        $qb->andWhere('i.is_active = :is_active');
        $qb->setParameter('is_active', true);

        $data_search = '"new_value":"0"';
        $qb->andWhere(
            '((a.action_id = :action_innovation_created AND i.is_frozen = :false) OR 
            (a.action_id = :action_innovation_frozen AND a.data LIKE :data_search AND i.is_frozen = :false))'
        );

        $qb->setParameter('action_innovation_created', Activity::ACTION_INNOVATION_CREATED);
        $qb->setParameter('false', false);
        $qb->setParameter('action_innovation_frozen', Activity::ACTION_INNOVATION_FROZEN);
        $qb->setParameter('data_search', '%' . $data_search . '%');
        $qb->groupBy('i.id');
        $qb->orderBy('a.created_at', 'DESC');
        if ($limit != -1) {
            $qb->setFirstResult($offset);
            $qb->setMaxResults($limit);
        }
        $results = $qb->getQuery()->getResult();
        $ret = array();
        if (count($results) > 0) {
            foreach ($results as $activity) {
                $ret[] = $activity->toDashboardArray();
            }
        }
        return $ret;
    }


    /**
     * Dashboard : get innovations out of pipeline
     *
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function dashboardGetInnovationsOutOfPipeline($offset = 0, $limit = 6)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select(['a', 'i'])
            ->from('AppBundle:Activity', 'a')
            ->innerJoin('a.innovation', 'i');

        $out_stages = $em->getRepository('AppBundle:Stage')->getOutStages();
        $qb->andWhere('i.stage IN (:out_stages)');
        $qb->setParameter('out_stages', $out_stages);
        $qb->andWhere('i.is_active = :is_active');
        $qb->setParameter('is_active', true);

        $data_search_1 = '"new_value":1';
        $data_search_7 = '"new_value":7';
        $data_search_8 = '"new_value":8';
        $qb->andWhere(
            '(
                (a.action_id = :action_innovation_frozen AND  a.data LIKE :data_search_1 AND i.is_frozen = :true) OR 
                (
                    a.action_id = :action_innovation_change_stage AND 
                    (a.data LIKE :data_search_7 OR a.data LIKE :data_search_8)
                )
            )'
        );
        $qb->setParameter('action_innovation_change_stage', Activity::ACTION_INNOVATION_CHANGE_STAGE);
        $qb->setParameter('action_innovation_frozen', Activity::ACTION_INNOVATION_FROZEN);
        $qb->setParameter('data_search_1', '%' . $data_search_1 . '%');
        $qb->setParameter('data_search_7', '%' . $data_search_7 . '%');
        $qb->setParameter('data_search_8', '%' . $data_search_8 . '%');
        $qb->setParameter('true', true);
        $qb->groupBy('i.id');
        $qb->orderBy('a.created_at', 'DESC');
        if ($limit != -1) {
            $qb->setFirstResult($offset);
            $qb->setMaxResults($limit);
        }
        $results = $qb->getQuery()->getResult();
        $ret = array();
        if (count($results) > 0) {
            foreach ($results as $activity) {
                $ret[] = $activity->toDashboardArray();
            }
        }
        return $ret;
    }

    /**
     * Dashboard : get innovations in market date modification.
     *
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function dashboardGetInnovationsInMarketDateModification($offset = 0, $limit = 6)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select(['a', 'i'])
            ->from('AppBundle:Activity', 'a')
            ->innerJoin('a.innovation', 'i');

        $data_search = '"key":"market_date"';
        $qb->where('a.action_id = :action_id_updated');
        $qb->setParameter('action_id_updated', Activity::ACTION_INNOVATION_UPDATED);
        $qb->andWhere('a.data LIKE :data_search');
        $qb->setParameter('data_search', '%' . $data_search . '%');
        $qb->andWhere('i.is_active = :is_active');
        $qb->setParameter('is_active', true);

        $qb->groupBy('i.id');
        $qb->orderBy('a.created_at', 'DESC');
        if ($limit != -1) {
            $qb->setFirstResult($offset);
            $qb->setMaxResults($limit);
        }
        $results = $qb->getQuery()->getResult();
        $ret = array();
        if (count($results) > 0) {
            foreach ($results as $activity) {
                $ret[] = $activity->toDashboardArray();
            }
        }
        return $ret;
    }

    /**
     * Dashboard : get innovations in market date soon.
     *
     * @param int $offset
     * @param int $limit
     * @return array
     */
    public function dashboardGetInnovationsInMarketSoon($offset = 0, $limit = 6)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select(['i'])
            ->from('AppBundle:Innovation', 'i');

        $inner_stages = $em->getRepository('AppBundle:Stage')->getInnerStages();
        $qb->andWhere('i.stage IN (:inner_stages)');
        $qb->setParameter('inner_stages', $inner_stages);

        $qb->andWhere('i.is_active = :is_active');
        $qb->setParameter('is_active', true);

        $qb->andWhere('i.is_frozen = :is_frozen');
        $qb->setParameter('is_frozen', false);

        $qb->andWhere('i.in_market_date >= :from');
        $qb->setParameter('from', new \DateTime());
        $qb->orderBy('i.in_market_date', 'ASC');
        if ($limit != -1) {
            $qb->setFirstResult($offset);
            $qb->setMaxResults($limit);
        }
        $results = $qb->getQuery()->getResult();
        $ret = array();
        if (count($results) > 0) {
            foreach ($results as $innovation) {
                $ret[] = $innovation->toDashboardArray();
            }
        }
        return $ret;
    }


    /**
     * Get all promote activities for innovation by action_id.
     *
     * @param Innovation $innovation
     * @param int $action_id
     * @param int $offset
     * @param int $limit
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    function getPromoteActivitiesForInnovationByActionId($innovation, $action_id, $offset = 0, $limit = 20)
    {
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('a')->from('AppBundle:Activity', 'a');

        $qb->where('a.innovation = :innovation');
        $qb->setParameter('innovation', $innovation->getId());

        $qb->andWhere('a.action_id = (:action_id)');
        $qb->setParameter('action_id', $action_id);

        $qb->orderBy('a.created_at', 'DESC');
        $qb->setFirstResult($offset);
        $qb->setMaxResults($limit);
        return $qb->getQuery()->getResult();
    }

    /**
     * Get all promote activities HTML for innovation by action_id.
     *
     * @param Innovation $innovation
     * @param int $action_id
     * @param int $offset
     * @param int $limit
     * @param string $style
     * @param bool $only_nb
     * @return string
     * @throws \Doctrine\DBAL\DBALException
     */
    function getPromoteActivitiesHTMLForInnovationByActionId($innovation, $action_id, $offset = 0, $limit = 20, $style = "", $only_nb = false)
    {
        $html = '';
        $activities = $this->getPromoteActivitiesForInnovationByActionId($innovation, $action_id, $offset, $limit);
        if($only_nb){
            return count($activities);
        }
        foreach ($activities as $activity){
            $html .= $activity->toPromoteHtml($style);
        }
        return $html;
    }


    /**
     * Get all promote activities HTML for innovation by action_id.
     *
     * @param Innovation $innovation
     * @param int $offset
     * @param int $limit
     * @param string $style
     * @return string
     * @throws \Doctrine\DBAL\DBALException
     */
    function getShareActivitiesHTMLForInnovation($innovation, $offset = 0, $limit = 20, $style = "")
    {
        $html = '';
        $activities = $this->getPromoteActivitiesForInnovationByActionId($innovation, Activity::ACTION_INNOVATION_SHARE, $offset, $limit);
        foreach ($activities as $activity){
            $html .= $activity->toShareHtml($style);
        }
        return $html;
    }

    /**
     * Create canvas activity.
     *
     * @param User $user
     * @param Innovation $innovation
     * @param string $activity_key
     * @param null|Canvas $canvas
     * @param null|array $update_data
     * @return Activity
     */
    public function createCanvasActivity($user, $innovation, $activity_key, $canvas, $update_data = null)
    {
        $data = array();
        if($canvas) {
            $data = array(
                'canvas_title' => (($canvas->getTitle()) ? $canvas->getTitle() : null),
                'canvas_id' => $canvas->getId(),
                'field_name' => (($update_data) ? $update_data['field_name'] : null),
                'old_value' => (($update_data) ? $update_data['old_value'] : null),
                'new_value' => (($update_data) ? $update_data['new_value'] : null),
            );
        }
        return $this->createActivity($user, $innovation, $activity_key, null, $data);
    }
}
