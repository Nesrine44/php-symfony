<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Innovation;
use AppBundle\Entity\Notification;

/**
 * NotificationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NotificationRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Create or update promote innovation notification.
     * @param Innovation $innovation
     * @param int $nb_views
     * @param int $nb_exports
     * @param int $nb_share
     * @return Notification
     */
    public function createOrUpdatePromoteInnovation($innovation, $nb_views = 0, $nb_exports = 0, $nb_share = 0){
        if(!$innovation){
            return false;
        }
        $em = $this->getEntityManager();
        $notification = $em->getRepository('AppBundle:Notification')
            ->findOneBy(['innovation' => $innovation,
                'action' => Notification::ACTION_ON_PROMOTE_INNOVATION,
                'status' => Notification::STATUS_TO_SEND,
                'type' => Notification::TYPE_MAIL
            ]);
        $data = array(
            'views' => 0,
            'exports' => 0,
            'share' => 0,
        );
        if (!$notification) {
            $notification = new Notification();
            $notification->setInnovation($innovation);
            $notification->setType(Notification::TYPE_MAIL);
            $notification->setAction(Notification::ACTION_ON_PROMOTE_INNOVATION);
        }else{
            $data = $notification->getDataArray();
        }
        $data['views'] += $nb_views;
        $data['exports'] += $nb_exports;
        if(array_key_exists('share', $data)){
            $data['share'] += $nb_share;
        }else{
            $data['share'] = $nb_share;
        }
        $notification->setDataArray($data);

        $em->persist($notification);
        $em->flush();
        return $notification;
    }

    /**
     * get promote innovation notifications to send
     * @return array|\object[]
     */
    public function getPromoteInnovationNotificationsToSend(){
        $em = $this->getEntityManager();
        return $em->getRepository('AppBundle:Notification')
            ->findBy([
                'action' => Notification::ACTION_ON_PROMOTE_INNOVATION,
                'status' => Notification::STATUS_TO_SEND,
                'type' => Notification::TYPE_MAIL
            ]);
    }

    /**
     * Set notification in progress.
     *
     * @param $notification_id
     * @return bool
     * @throws \Doctrine\DBAL\DBALException
     */
    public function setNotificationInProgress($notification_id){
        $em = $this->getEntityManager();
        $sql = "UPDATE notification SET notification_status = :status_in_progress WHERE id = :id AND notification_status = :status_to_send";
        $stmt = $em->getConnection()->prepare($sql);
        $stmt->bindValue(':status_in_progress', Notification::STATUS_IN_PROGRESS);
        $stmt->bindValue(':id', $notification_id);
        $stmt->bindValue(':status_to_send', Notification::STATUS_TO_SEND);
        $stmt->execute();
        return $stmt->rowCount();
    }
}
