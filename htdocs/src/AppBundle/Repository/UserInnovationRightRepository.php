<?php

namespace AppBundle\Repository;
use AppBundle\AppBundle;
use AppBundle\Entity\Activity;
use AppBundle\Entity\Innovation;
use AppBundle\Entity\User;
use AppBundle\Entity\UserInnovationRight;

/**
 * UserInnovationRightRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserInnovationRightRepository extends \Doctrine\ORM\EntityRepository
{

    /**
     * Create or update UserInnovationRight.
     * 
     * @param User $user
     * @param Innovation $innovation
     * @param string $role
     * @param null|User $activity_user
     * @return UserInnovationRight
     */
    public function createOrUpdateUserInnovationRight($user, $innovation, $role = UserInnovationRight::ROLE_OTHER, $activity_user = null){
        if(!$user || !$innovation){
            return false;
        }
        $activity_action = Activity::ACTION_TEAM_INNOVATION_UPDATE_RIGHT;
        $em = $this->getEntityManager();
        $userInnovationRight = $em->getRepository('AppBundle:UserInnovationRight')
            ->findOneBy(['user' => $user, 'innovation' => $innovation]);
        if (!$userInnovationRight) {
            $activity_action = Activity::ACTION_TEAM_INNOVATION_CREATE_RIGHT;
            $userInnovationRight = new UserInnovationRight();
            $userInnovationRight->setUser($user);
            $userInnovationRight->setInnovation($innovation);
        }
        $userInnovationRight->setRight(UserInnovationRight::RIGHT_WRITE);
        $userInnovationRight->setRole($role);

        if($activity_user){
            $data_array = array(
                'user_id' => $user->getId(),
                'user_name' => $user->getProperUsername(),
                'role' => $role,
                'right' => UserInnovationRight::RIGHT_WRITE,
            );
            $em->getRepository('AppBundle:Activity')->createActivity($activity_user, $innovation, $activity_action, 'user_innovation_right', $data_array);
        }

        $em->persist($userInnovationRight);
        $em->flush();
        return $userInnovationRight;
    }

    /**
     * Delete UserInnovationRight.
     *
     * @param User $user
     * @param Innovation $innovation
     * @param null|User $activity_user
     * @return bool
     */
    public function deleteInnovationRight($user, $innovation, $activity_user = null){
        if(!$user || !$innovation){
            return false;
        }
        $em = $this->getEntityManager();
        $user_innovation_right = $em->getRepository('AppBundle:UserInnovationRight')->findOneBy(array('user' => $user, 'innovation' => $innovation));
        if ($user_innovation_right) {
            if($activity_user){
                $data_array = array(
                    'user_id' => $user->getId(),
                    'user_name' => $user->getProperUsername()
                );
                $em->getRepository('AppBundle:Activity')->createActivity($activity_user, $innovation, Activity::ACTION_TEAM_INNOVATION_DELETE_RIGHT, 'user_innovation_right', $data_array);
            }
            $em->remove($user_innovation_right);
            $em->flush();
            $em->getRepository('AppBundle:Settings')->updateCurrentSettingsPing();
            return true;
        }
        return false;
    }

    /**
     * Delete all for innovation.
     *
     * @param $innovation
     * @return bool
     */
    public function deleteAllForInnovation($innovation){
        if(!$innovation){
            return false;
        }
        $em = $this->getEntityManager();
        $qb = $em->createQueryBuilder();
        $query = $qb->delete('AppBundle:UserInnovationRight', 'uir')
            ->where('uir.innovation = :innovation')
            ->setParameter('innovation', $innovation)
            ->getQuery();
        $query->execute();
        return true;
    }

    /**
     * Create or update UserInnovationRight by innovation ids.
     *
     * @param User $user
     * @param array $innovation_ids
     * @param string $role
     * @return UserInnovationRight
     */
    public function createOrUpdateUserInnovationRightByInnovationIds($user, $innovation_ids, $role = UserInnovationRight::ROLE_OTHER){
        if(!$user || !$innovation_ids || count($innovation_ids) == 0){
            return false;
        }
        $em = $this->getEntityManager();
        foreach ($innovation_ids as $innovation_id) {
            $innovation = $em->getRepository('AppBundle:Innovation')->findActiveInnovation(intval($innovation_id));
            if($innovation) {
                $userInnovationRight = $em->getRepository('AppBundle:UserInnovationRight')
                    ->findOneBy(['user' => $user, 'innovation' => $innovation]);
                if (!$userInnovationRight) {
                    $userInnovationRight = new UserInnovationRight();
                    $userInnovationRight->setUser($user);
                    $userInnovationRight->setInnovation($innovation);
                }
                $userInnovationRight->setRight(UserInnovationRight::RIGHT_WRITE);
                $userInnovationRight->setRole($role);
                $em->persist($userInnovationRight);
            }
        }
        $em->flush();
        return true;
    }

    /**
     * Get user_innovation_right html table tds by innovation.
     *
     * @param Innovation $innovation
     * @param User|null $updated_uir_user
     * @return array
     */
    public function getUserInnovationRightByInnovation($innovation, $updated_uir_user = null){
        $user_innnovations_rights = $innovation->getUserInnovationRights();
        $proper_list = array();
        $sortArray = array();
        foreach ($user_innnovations_rights as $user_innnovations_right){
            $proper = $user_innnovations_right->getArrayForTableTr();
            if($proper){
                $proper_list[] = $proper;
                $sortArray[] = $proper['innovation_title'];
            }
        }
        if(count($sortArray) > 0) {
            array_multisort($sortArray, SORT_ASC, $proper_list);
        }
        $ret = array();
        foreach ($proper_list as $proper){
            $is_new = ($updated_uir_user && $updated_uir_user->getId() == $proper['user_id']);
            $proper['is_new'] = $is_new;
            $ret[] = $proper;
        }
        return $ret;
    }

    /**
     * Get admin user_innovation_right array by user.
     *
     * @param User $user
     * @return array
     */
    public function getAdminUserInnovationRightArrayByUser($user){
        if($user->hasManagementRights() || $user->hasAdminRights()){
            return "";
        }
        $user_innnovations_rights = $user->getUserInnovationRights();
        $proper_list = array();
        $sortArray = array();
        foreach ($user_innnovations_rights as $user_innnovations_right){
            $proper = $user_innnovations_right->getArrayForAdminTableTr();
            if($proper){
                $proper_list[] = $proper;
                $sortArray[] = $proper['innovation_title'];
            }
        }
        if(count($sortArray) > 0) {
            array_multisort($sortArray, SORT_ASC, $proper_list);
        }

        return $proper_list;
    }


    /**
     * Get admin possible user_innovation_right array by user.
     *
     * @param User $user
     * @return array
     */
    public function getAdminPossibleUserInnovationRightArrayByUser($user, $entity_id = null, $search_word = ''){
        if($user->hasManagementRights() || $user->hasAdminRights()){
            return "";
        }
        $em = $this->getEntityManager();
        $user_innnovations_rights = $user->getUserInnovationRights();
        $innovations_ids = array();
        foreach ($user_innnovations_rights as $user_innnovations_right){
            $innovations_ids[] = $user_innnovations_right->getInnovation()->getId();
        }
        $possibles_innovations = $em->getRepository('AppBundle:Innovation')->searchActiveInnovationsForAdmin($entity_id, $innovations_ids, $search_word);
        $proper_list = array();
        $sortArray = array();
        foreach ($possibles_innovations as $innovation){
            $proper_list[] = array(
                'innovation_id' => $innovation->getId(),
                'is_owner' => false,
                'innovation_title' => $innovation->getTitle(),
                'innovation_entity' => (($innovation->getEntity()) ? $innovation->getEntity()->getTitle() : ''),
                'right' => 'Add',
                'role' => null
            );
            $sortArray[] = $innovation->getTitle();
        }
        if(count($sortArray) > 0) {
            array_multisort($sortArray, SORT_ASC, $proper_list);
        }
        return $proper_list;
    }
}
